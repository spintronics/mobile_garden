/*
 * mobile_garden_api_v1
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * API version: 1.0
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package openapi

import (
	"bytes"
	"context"
	"io"
	"log"
	"net/http"
	"os"
	"time"

	"github.com/aws/aws-sdk-go/aws"
	"github.com/aws/aws-sdk-go/aws/credentials"
	"github.com/aws/aws-sdk-go/aws/session"
	"github.com/aws/aws-sdk-go/service/s3"
	"github.com/gin-gonic/gin"
	"go.mongodb.org/mongo-driver/bson"
	"go.mongodb.org/mongo-driver/mongo"
	"go.mongodb.org/mongo-driver/mongo/options"
)

func mongoClient() (*mongo.Client, error) {
	uri := os.Getenv("MONGODB_URI")
	if uri == "" {
		log.Fatal("You must set your 'MONGODB_URI' environmental variable. See\n\t https://www.mongodb.com/docs/drivers/go/current/usage-examples/#environment-variable")
	}
	return mongo.Connect(context.TODO(), options.Client().ApplyURI(uri))
}

func awsClient() *s3.S3 {
	sess := session.Must(session.NewSession(
		&aws.Config{
			Region: aws.String("us-east-2"),
			Credentials: credentials.NewStaticCredentials(
				os.Getenv("AWS_ACCESS_KEY_ID"),
				os.Getenv("AWS_SECRET_ACCESS_KEY"),
				"",
			),
		},
	))

	return s3.New(sess)

}

// GetSoilReadings - Your GET endpoint
func GetSoilReadings(c *gin.Context) {
	client, err := mongoClient()
	if err != nil {
		c.String(http.StatusInternalServerError, "Error connecting to MongoDB Atlas: %v", err)
		return
	}
	defer client.Disconnect(c)

	cursor, err := client.Database("mobile_garden").Collection("soil_readings").Find(c, bson.D{}, options.Find().SetLimit(10))

	if err != nil {
		c.String(http.StatusInternalServerError, "Unable to find soil readings: %v", err)
		return
	}

	var results []SoilReading

	if err = cursor.All(c, &results); err != nil {
		c.String(http.StatusInternalServerError, "Empty result set: %v", err)
		return
	}

	c.JSON(http.StatusOK, results)
}

// PostFile -
func PostFile(c *gin.Context) {
	file, header, err := c.Request.FormFile("file")
	if err != nil {
		c.String(http.StatusBadRequest, "Error reading file: %v", err)
		return
	}
	defer file.Close()

	buf := bytes.NewBuffer(nil)
	if _, err := io.Copy(buf, file); err != nil {
		c.String(http.StatusInternalServerError, "Error reading file: %v", err)
		return
	}


	name := header.Filename

	queryName := c.Query("fileName")
	if queryName != "" {
		name = queryName
	}

	if name == "" {
		name = time.Now().Format("2006-01-02T15:04:05.000Z")
	}

	svc := awsClient()
	_, err = svc.PutObject(&s3.PutObjectInput{
		Bucket: aws.String("mobile-garden"),
		Key:    aws.String(name),
		Body:   bytes.NewReader(buf.Bytes()),
	})

	if err != nil {
		c.String(http.StatusInternalServerError, "Error uploading file: %v", err)
		return
	}

	mongo, err := mongoClient()

	if err != nil {
		c.String(http.StatusInternalServerError, "Error connecting to MongoDB Atlas: %v", err)
		return
	}

	defer mongo.Disconnect(c)

	_, err = mongo.Database("mobile_garden").Collection("images").InsertOne(c, bson.M{
		"fileName": name,
		"date":     time.Now(),
		"url":      "https://mobile-garden.s3.amazonaws.com/" + name,
	})

	if err != nil {
		c.String(http.StatusInternalServerError, "Error inserting image: %v", err)
		return
	}

	c.String(http.StatusOK, "https://mobile-garden.s3.amazonaws.com/"+name)
}

// PostSoilReading -
func PostSoilReading(c *gin.Context) {
	c.JSON(http.StatusOK, gin.H{})
}
